Hello World.
!Hi.

Device.java
import lombok.Data;
import java.util.List;

@Data
public class Device {
    private String neId;
    private String ipAddr;
    private String name;
    private List<Equipment> equipments;
}

Equipment.java
import lombok.Data;
import java.util.Map;

@Data
public class Equipment {
    private String equipId;
    private String name;
    private String type;
    private Map<String, String> equipmentAttributes; // Map to hold clei-no, part-no, etc.
}

DeviceService
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class DeviceService {
    
    private final RestTemplate restTemplate;

    @Value("${api.getAllDevices}")
    private String getAllDevicesUrl;

    @Value("${api.getAllDeviceConfiguration}")
    private String getAllDeviceConfigurationUrl;

    @Value("${api.getConfiguration}")
    private String getConfigurationUrl;

    public DeviceService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public List<Map<String, Object>> getAllDevices() {
        List<Device> devices = restTemplate.getForObject(getAllDevicesUrl, List.class);
        
        // Filter out sensitive fields
        return devices.stream().map(device -> Map.of(
                "neId", device.getNeId(),
                "ipAddr", device.getIpAddr(),
                "name", device.getName()
        )).collect(Collectors.toList());
    }

    public List<Device> getAllDeviceConfiguration() {
        return restTemplate.getForObject(getAllDeviceConfigurationUrl, List.class);
    }

    public List<Equipment> getConfigurationById(String neId) {
        String url = getConfigurationUrl.replace("{ne-id}", neId);
        return restTemplate.getForObject(url, List.class);
    }
}

DeviceController.java
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/nbi")
public class DeviceController {

    private final DeviceService deviceService;

    public DeviceController(DeviceService deviceService) {
        this.deviceService = deviceService;
    }

    @GetMapping("/getAllDevices")
    public List<Map<String, Object>> getAllDevices() {
        return deviceService.getAllDevices();
    }

    @GetMapping("/getAllDeviceConfiguration")
    public List<Device> getAllDeviceConfiguration() {
        return deviceService.getAllDeviceConfiguration();
    }

    @GetMapping("/getConfiguration/{neId}")
    public List<Equipment> getConfigurationById(@PathVariable String neId) {
        return deviceService.getConfigurationById(neId);
    }
}


RestTemplateConfiguration.java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class RestTemplateConfig {
    
    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}

Property file converter
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import java.util.Properties;

public class APISpecConverter {

    public static void main(String[] args) {
        String inputFilePath = "api_spec.json"; // Input JSON file path
        String outputFilePath = "api_spec.properties"; // Output Properties file path

        convertJsonToProperties(inputFilePath, outputFilePath);
    }

    public static void convertJsonToProperties(String inputFilePath, String outputFilePath) {
        try {
            // Read API Specification JSON
            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, String> apiSpec = objectMapper.readValue(new File(inputFilePath), Map.class);

            // Convert to Properties format
            Properties properties = new Properties();
            properties.putAll(apiSpec);

            // Save as .properties file
            FileWriter writer = new FileWriter(outputFilePath);
            properties.store(writer, "Converted API Specification");
            writer.close();

            System.out.println("Conversion Successful! Properties file saved at: " + outputFilePath);
        } catch (IOException e) {
            System.out.println("Error during conversion: " + e.getMessage());
        }
    }
}
